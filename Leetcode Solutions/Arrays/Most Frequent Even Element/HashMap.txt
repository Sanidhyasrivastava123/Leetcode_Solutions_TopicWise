*************************************************************************
Time Complexity: O(n)
Space Complexity: O(n)

*************************************************************************

class Solution {
    public int mostFrequentEven(int[] nums) {

        HashMap<Integer,Integer> evenmap= new HashMap<>();
        int count=0;
        int element = Integer.MAX_VALUE;
        for (int i=0;i<nums.length;i++)
        {
            if (nums[i]%2==0)
            {
                evenmap.put(nums[i],evenmap.getOrDefault(nums[i],0)+1);
                if (evenmap.get(nums[i]) >count)
                {
                    count=evenmap.get(nums[i]);
                }
            }
        }

        for (int key : evenmap.keySet())
        {
            if (evenmap.get(key)==count)
            {
                element =Math.min(element,key);
            }
        }

        if(element == Integer.MAX_VALUE)
        {
            return -1;
        }
        return element;
    }
}