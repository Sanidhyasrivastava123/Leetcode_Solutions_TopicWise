*************************************************************************
Time Complexity: O(n^2)
Space Complexity: O(1)

Using Nested Loops 
The idea is to iterate over all elements and count the frequency of the 
element in the array. If the frequency of the element is greater than 
floor(n/3), add it to the result. To avoid adding duplicate elements 
into the result, we can check if the element is already present in the 
result. We can stop the iteration if we have already found two majority 
elements.
*************************************************************************

static List<Integer> findMajority(int[] arr) {
        int n = arr.length;
        List<Integer> res = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            
            // Count the frequency of arr[i]
            int cnt = 0;
            for (int j = i; j < n; j++) {
                if (arr[j] == arr[i])
                    cnt += 1;
            }
          
            // Check if arr[i] is a majority element
            if (cnt > (n / 3)) {
              
                // Add arr[i] only if it is not already
                // present in the result
                if (res.size() == 0 || arr[i] != res.get(0)) {
                    res.add(arr[i]);
                }
            }
          
            // If we have found two majority elements, 
            // we can stop our search
            if (res.size() == 2) {
                if (res.get(0) > res.get(1))
                    java.util.Collections.swap(res, 0, 1);
                break;
            }
        }

        return res;
    }